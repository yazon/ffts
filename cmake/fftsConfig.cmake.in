@PACKAGE_INIT@

# Include the targets file
include("${CMAKE_CURRENT_LIST_DIR}/fftsTargets.cmake")

# Check if the targets were found
check_required_components(ffts)

# Set variables for backward compatibility
set(FFTS_FOUND TRUE)
set(FFTS_VERSION "@PROJECT_VERSION@")
set(FFTS_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(FFTS_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Provide find_package compatibility
if(TARGET ffts::ffts_static)
    set(FFTS_LIBRARIES ffts::ffts_static)
elseif(TARGET ffts::ffts_shared)
    set(FFTS_LIBRARIES ffts::ffts_shared)
endif()

# Set compile definitions that were used when building FFTS
# These are determined at build time and substituted during installation
set(FFTS_COMPILE_DEFINITIONS "")

# Add architecture-specific definitions that were enabled during build
@FFTS_NEON_DEFINE@
@FFTS_VFP_DEFINE@
@FFTS_SSE_DEFINE@
@FFTS_SSE2_DEFINE@
@FFTS_SSE3_DEFINE@

# Note: FFTS_BUILD is not included here as it's only used when building FFTS itself,
# not when using FFTS as a library. External users should not define FFTS_BUILD.

# Print configuration info
message(STATUS "FFTS found: ${FFTS_VERSION}")
message(STATUS "  Include directories: ${FFTS_INCLUDE_DIRS}")
message(STATUS "  Library directories: ${FFTS_LIBRARY_DIRS}")
message(STATUS "  Libraries: ${FFTS_LIBRARIES}")
message(STATUS "  Compile definitions: ${FFTS_COMPILE_DEFINITIONS}")