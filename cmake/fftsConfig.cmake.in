@PACKAGE_INIT@

# Include the targets file
include("${CMAKE_CURRENT_LIST_DIR}/fftsTargets.cmake")

# Check if the targets were found
check_required_components(ffts)

# Set variables for backward compatibility
set(FFTS_FOUND TRUE)
set(FFTS_VERSION "@PROJECT_VERSION@")
set(FFTS_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(FFTS_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Provide find_package compatibility
if(TARGET ffts::ffts_static)
    set(FFTS_LIBRARIES ffts::ffts_static)
elseif(TARGET ffts::ffts_shared)
    set(FFTS_LIBRARIES ffts::ffts_shared)
endif()

# Set compile definitions
set(FFTS_COMPILE_DEFINITIONS "")

# Add architecture-specific definitions
if(ENABLE_NEON)
    list(APPEND FFTS_COMPILE_DEFINITIONS HAVE_NEON)
endif()

if(ENABLE_VFP)
    list(APPEND FFTS_COMPILE_DEFINITIONS HAVE_VFP)
endif()

if(HAVE_SSE)
    list(APPEND FFTS_COMPILE_DEFINITIONS HAVE_SSE)
endif()

if(HAVE_SSE2)
    list(APPEND FFTS_COMPILE_DEFINITIONS HAVE_SSE2)
endif()

if(HAVE_SSE3)
    list(APPEND FFTS_COMPILE_DEFINITIONS HAVE_SSE3)
endif()

if(NOT DISABLE_DYNAMIC_CODE)
    list(APPEND FFTS_COMPILE_DEFINITIONS FFTS_BUILD)
endif()

# Print configuration info
message(STATUS "FFTS found: ${FFTS_VERSION}")
message(STATUS "  Include directories: ${FFTS_INCLUDE_DIRS}")
message(STATUS "  Library directories: ${FFTS_LIBRARY_DIRS}")
message(STATUS "  Libraries: ${FFTS_LIBRARIES}")
message(STATUS "  Compile definitions: ${FFTS_COMPILE_DEFINITIONS}")