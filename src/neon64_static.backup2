/*
 * Simple ARM64 NEON Static Test Functions
 * Minimal implementation to test calling convention
 */

    .text
    .align 4

// Simple test versions that just return without doing much
#ifdef __APPLE__
    .globl _neon_static_e_f
_neon_static_e_f:
#else
    .globl neon_static_e_f
neon_static_e_f:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    // Just copy some input to output and return
    // x0 = plan, x1 = input, x2 = output
    ld1     {v0.4s, v1.4s}, [x1]
    st1     {v0.4s, v1.4s}, [x2]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_e_i
_neon_static_e_i:
#else
    .globl neon_static_e_i
neon_static_e_i:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x1]
    st1     {v0.4s, v1.4s}, [x2]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_o_f
_neon_static_o_f:
#else
    .globl neon_static_o_f
neon_static_o_f:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x1]
    st1     {v0.4s, v1.4s}, [x2]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_o_i
_neon_static_o_i:
#else
    .globl neon_static_o_i
neon_static_o_i:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x1]
    st1     {v0.4s, v1.4s}, [x2]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x4_f
_neon_static_x4_f:
#else
    .globl neon_static_x4_f
neon_static_x4_f:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    // x0 = data, x1 = ws
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x4_i
_neon_static_x4_i:
#else
    .globl neon_static_x4_i
neon_static_x4_i:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x8_f
_neon_static_x8_f:
#else
    .globl neon_static_x8_f
neon_static_x8_f:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    // x0 = data, x1 = N, x2 = ws
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x8_i
_neon_static_x8_i:
#else
    .globl neon_static_x8_i
neon_static_x8_i:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x8_t_f
_neon_static_x8_t_f:
#else
    .globl neon_static_x8_t_f
neon_static_x8_t_f:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

#ifdef __APPLE__
    .globl _neon_static_x8_t_i
_neon_static_x8_t_i:
#else
    .globl neon_static_x8_t_i
neon_static_x8_t_i:
#endif
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    ld1     {v0.4s, v1.4s}, [x0]
    st1     {v0.4s, v1.4s}, [x0]
    ldp     x29, x30, [sp], #16
    ret

    .end 